{"version":3,"sources":["constants.js","App.js","index.js"],"names":["twisterColors","twisterLimbs","getRandomNum","num","Math","floor","random","App","useState","colors","setColors","length","color","setColor","limb","setLimb","showSettings","setShowSettings","colorClass","classNames","spinWheel","newColor","newLimb","check","event","thisColor","target","value","includes","newColors","filter","className","onClick","map","htmlFor","onChange","type","id","checked","rootElement","document","getElementById","createRoot","render"],"mappings":"mOAAaA,EAAgB,CAC3B,SACA,SACA,QACA,MACA,OACA,SACA,OACA,SAGWC,EAAe,CAC1B,YACA,aACA,YACA,c,OCVIC,EAAe,SAACC,GAAG,OAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAK,EAE/C,SAASI,IACtB,MAA4BC,mBAASR,GAAc,mBAA5CS,EAAM,KAAEC,EAAS,KACxB,EAA0BF,mBAASC,EAAOP,EAAaO,EAAOE,UAAS,mBAAhEC,EAAK,KAAEC,EAAQ,KACtB,EAAwBL,mBACtBP,EAAaC,EAAaD,EAAaU,UACxC,mBAFMG,EAAI,KAAEC,EAAO,KAGpB,EAAwCP,oBAAS,GAAM,mBAAhDQ,EAAY,KAAEC,EAAe,KAC9BC,EAAaC,IAAW,QAASP,GACjCQ,EAAY,WAChB,IAAIC,EAAWZ,EAAOP,EAAaO,EAAOE,SACtCW,EAAUrB,EAAaC,EAAaD,EAAaU,SACrDE,EAASQ,GACTN,EAAQO,EACV,EACMC,EAAQ,SAACC,GACb,IAAMC,EAAYD,EAAME,OAAOC,MAC/B,GAAIlB,EAAOmB,SAASH,GAAY,CAC9B,IAAMI,EAAYpB,EAAOqB,QAAO,SAAClB,GAAK,OAAKA,IAAUa,CAAS,IAC9Df,EAAUmB,GACNJ,IAAcb,GAChBQ,GAEJ,MACEV,EAAU,GAAD,mBAAKD,GAAM,CAAEgB,IAE1B,EAoBA,OACE,sBAAKM,UAAU,MAAK,UAClB,4DACA,8BACE,wBACEA,UAAU,oBACVC,QAAS,kBAAMf,GAAiBD,EAAa,EAAC,wBAKlD,wBAAQe,UAAU,MAAMC,QAASZ,EAAU,4BAG1CJ,GACC,sBAAKe,UAAU,WAAU,UACvB,0CACA,kDACA,6BAAK/B,EAAciC,KApCJ,SAACrB,GACtB,OACE,6BACE,wBAAOmB,UAAU,aAAaG,QAAStB,EAAM,UAC3C,uBACEuB,SAAUZ,EACVa,KAAK,WACLT,MAAOf,EACPyB,GAAIzB,EACJ0B,QAAS7B,EAAOmB,SAAShB,KAE3B,qBAAKmB,UAAS,kBAAanB,KAC1BA,MAVIA,EAcb,MAqBQ,wBAAQmB,UAAU,MAAMC,QAAS,kBAAMf,GAAgB,EAAM,EAAC,sBAKlE,sBAAKc,UAAWb,EAAYc,QAASZ,EAAU,UAC7C,sBAAMW,UAAU,QAAO,2BACvB,6BAAKjB,SAIb,CC7EA,IAAMyB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACpC,EAAG,M","file":"static/js/main.be5971f3.chunk.js","sourcesContent":["export const twisterColors = [\n  \"yellow\",\n  \"orange\",\n  \"green\",\n  \"red\",\n  \"blue\",\n  \"purple\",\n  \"pink\",\n  \"black\"\n];\n\nexport const twisterLimbs = [\n  \"left hand\",\n  \"right hand\",\n  \"left foot\",\n  \"right foot\"\n];\n","import \"./styles.css\";\nimport classNames from \"classnames\";\nimport { useState } from \"react\";\nimport { twisterColors, twisterLimbs } from \"./constants\";\n\nconst getRandomNum = (num) => Math.floor(Math.random() * num);\n\nexport default function App() {\n  const [colors, setColors] = useState(twisterColors);\n  const [color, setColor] = useState(colors[getRandomNum(colors.length)]);\n  const [limb, setLimb] = useState(\n    twisterLimbs[getRandomNum(twisterLimbs.length)]\n  );\n  const [showSettings, setShowSettings] = useState(false);\n  const colorClass = classNames(\"color\", color);\n  const spinWheel = () => {\n    let newColor = colors[getRandomNum(colors.length)];\n    let newLimb = twisterLimbs[getRandomNum(twisterLimbs.length)];\n    setColor(newColor);\n    setLimb(newLimb);\n  };\n  const check = (event) => {\n    const thisColor = event.target.value;\n    if (colors.includes(thisColor)) {\n      const newColors = colors.filter((color) => color !== thisColor);\n      setColors(newColors);\n      if (thisColor === color) {\n        spinWheel();\n      }\n    } else {\n      setColors([...colors, thisColor]);\n    }\n  };\n\n  const renderCheckbox = (color) => {\n    return (\n      <li key={color}>\n        <label className=\"colorLabel\" htmlFor={color}>\n          <input\n            onChange={check}\n            type=\"checkbox\"\n            value={color}\n            id={color}\n            checked={colors.includes(color)}\n          />\n          <div className={`preview ${color}`}></div>\n          {color}\n        </label>\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Bouldering Twister Spinner</h1>\n      <div>\n        <button\n          className=\"btn btn-secondary\"\n          onClick={() => setShowSettings(!showSettings)}\n        >\n          Settings\n        </button>\n      </div>\n      <button className=\"btn\" onClick={spinWheel}>\n        Spin the wheel\n      </button>\n      {showSettings && (\n        <div className=\"settings\">\n          <h2>Settings</h2>\n          <h3>Available Colors</h3>\n          <ul>{twisterColors.map(renderCheckbox)}</ul>\n          <button className=\"btn\" onClick={() => setShowSettings(false)}>\n            Close\n          </button>\n        </div>\n      )}\n      <div className={colorClass} onClick={spinWheel}>\n        <span className=\"click\">Click to spin</span>\n        <h2>{limb}</h2>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}